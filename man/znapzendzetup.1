.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ZNAPZENDZETUP 1"
.TH ZNAPZENDZETUP 1 "2018-04-13" "0.19.0" "znapzend"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
znapzendzetup \- znapzend setup utility
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBznapzendzetup\fR \fIcommand\fR [\fIoptions...\fR]
.PP
where 'command' is one of the following:
.PP
.Vb 8
\&    create  [\-\-rootExec={pfexec|sudo}] \e
\&            [\-\-recursive] [\-\-mbuffer=<path>[:<port>]] [\-\-mbuffersize=<size>] \e
\&            [\-\-pre\-snap\-command=<command>] \e
\&            [\-\-post\-snap\-command=<command>] \e
\&            [\-\-tsformat=<format>] \-\-donotask \e
\&            [\-\-send\-delay=<time>] \e
\&            SRC plan dataset \e
\&            [ DST[:key] plan [[user@]host:]dataset [pre\-send\-command] [post\-send\-command] ]
\&
\&    delete  [\-\-rootExec={pfexec|sudo}] [\-\-dst=key] <src_dataset>
\&
\&    edit    [\-\-rootExec={pfexec|sudo}]
\&            [\-\-recursive=on|off] [\-\-mbuffer=<path>[:<port>]|off] [\-\-mbuffersize=<size>] \e
\&            [\-\-pre\-snap\-command=<command>|off] \e
\&            [\-\-post\-snap\-command=<command>|off] \e
\&            [\-\-tsformat=<format>] \-\-donotask \e
\&            [\-\-send\-delay=<time>] \e
\&            SRC [plan] dataset \e
\&            [ DST:key [plan] [dataset] [pre\-send\-command|off] [post\-send\-command|off] ]
\&
\&    edit    [\-\-rootExec={pfexec|sudo}] <src_dataset>
\&
\&    enable  [\-\-rootExec={pfexec|sudo}] <src_dataset>
\&
\&    disable [\-\-rootExec={pfexec|sudo}] <src_dataset>
\&
\&    list    [\-\-rootExec={pfexec|sudo}] [src_dataset]
\&
\&    export  [\-\-rootExec={pfexec|sudo}] <src_dataset>
\&
\&    import  [\-\-rootExec={pfexec|sudo}] [\-\-write] [\-\-prop <property>=<value>, [\-\-prop ...] ...]
\&            <src_dataset> [<prop_dump_file>]
\&
\&    help
\&
\&    man
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Use znapzendsetup to configure your backup tasks. The cli is modled after
the zfs commandline.
.PP
After modifying the configuration, send a \s-1HUP\s0 signal to your znapzend daemon
for it to re-read the configuration.
.PP
Below a few notes on main commands.
.SS "\fBcreate\fP"
.IX Subsection "create"
The heart of the znapzend backup is the plan. The plan specifies how often
to backup and for how long to keep the backups. A plan is required both for
the source and the destination datasets.
.PP
The plan consists of a series of retention periodes to interval
associations:
.PP
.Vb 1
\&  retA=>intA,retB=>intB,...
.Ve
.PP
Both intervals and retention periods are expressed in standard units of time
or multiples of them. You can use both the full name or a shortcut according
to the following table:
.PP
.Vb 7
\& second|sec|s
\& minute|min
\& hour|h
\& day|d
\& week|w
\& month|mon|m
\& year|y
.Ve
.PP
To keep one copy every 30 minutes for one week, specify:
.PP
.Vb 1
\& 1week=>30min
.Ve
.PP
To keep one copy every two days for 10 years:
.PP
.Vb 1
\& 10year=>2day
.Ve
.PP
In a minimal setup, you just specify a plan for the \fB\s-1SRC\s0\fR fileset. This
will cause snapshots to be taken and destroyed according to the plan. You
can then add one or several destinations (\fB\s-1DST\s0\fR) both local (preferably on
a different pool) or remote.
.PP
When adding multiple \fB\s-1DST\s0\fR entries, each will get labled for later
identification, optionally you can specify your own label.
.IP "\fB\-\-tsformat\fR=\fIlimited-strftime-format\fR" 4
.IX Item "--tsformat=limited-strftime-format"
The \fB\-\-tsformat\fR option specifies how the names of the snapshots are
constructed.
.Sp
The syntax is strftime\-like. The string must consist of the mandatory
.Sp
.Vb 1
\& %Y %m %d %H %M %S %z
.Ve
.Sp
Optionally,
.Sp
\&\- _ . :
.Sp
characters as well as any alphanumeric character are allowed.
.Sp
If not specified, \fB\-\-tsformat\fR defaults to \f(CW\*(C`%Y\-%m\-%d\-%H%M%S\*(C'\fR.
.Sp
If \fB\-\-tsformat\fR string is suffixed by a 'Z', times will be in \s-1UTC. E\s0.g.:
.Sp
.Vb 1
\& \-\-tsformat=\*(Aq%Y\-%m\-%dT%H:%M:%SZ\*(Aq
.Ve
.Sp
\&\s-1NOTE:\s0 that windoz will probably not like the \f(CW\*(C`:\*(C'\fR characters. So if you
intend to browse the snapshots with windoz, you may want to use a different
separator.
.IP "\fB\-\-mbuffer\fR=\fI/usr/bin/mbuffer\fR" 4
.IX Item "--mbuffer=/usr/bin/mbuffer"
Specify the path to your copy of the mbuffer utility.
.IP "\fB\-\-mbuffer\fR=\fI/usr/bin/mbuffer:31337\fR" 4
.IX Item "--mbuffer=/usr/bin/mbuffer:31337"
Specifiy the path to your copy of the mbuffer utility and the port used
on the destination. Caution: znapzend will send the data directly
from source mbuffer to destination mbuffer, thus data stream is \fBnot\fR
encrypted.
.IP "\fB\-\-mbuffersize\fR=\fInumber\fR{\fBb\fR|\fBk\fR|\fBM\fR|\fBG\fR}" 4
.IX Item "--mbuffersize=number{b|k|M|G}"
The size of the mbuffer can be set with the \fB\-\-mbuffersize\fR option.  It
supports the following units:
.Sp
.Vb 1
\& b, k, M, G
.Ve
.Sp
To specify a mbuffer size of 100MB:
.Sp
.Vb 1
\& \-\-mbuffersize=100M
.Ve
.Sp
If not set, the buffer size defaults to 1GB.
.IP "\fB\-\-donotask\fR" 4
.IX Item "--donotask"
Apply changes immediately. Without being asked if the config is as you
intended it to be.
.IP "\fB\-\-pre\-snap\-command\fR=\fI/path/bin args\fR, \fB\-\-post\-snap\-command\fR=\fI/path/bin args\fR" 4
.IX Item "--pre-snap-command=/path/bin args, --post-snap-command=/path/bin args"
Run commands/scripts before and after snapshots are taken on source.
e.g. for database locking/flushing (pre) and unlocking (post).
.Sp
If you deal with a mariadb/mysql database, you can use
.Sp
.Vb 2
\&  pre\-snap\-command  = /opt/oep/mariadb/bin/mysql \-e "set autocommit=0;flush tables with read lock;\e\e! /bin/sleep 600" &  /usr/bin/echo $! > /tmp/mariadblock.pid ; sleep 10
\&  post\-snap\-command = /usr/bin/kill \`/usr/bin/cat /tmp/mariadblock.pid\`;/usr/bin/rm /tmp/mariadblock.pid
.Ve
.Sp
to make sure that the on-disk data is consistant when snapshotting. Since the
lock stays only in place for the duration of the connection to mysql
we need to employ. For this to work, add the root password of your mariadb/mysql db
setup into ~root/.my.cnf and make sure the file permissions are tight ...
.Sp
The pre and post snapshot commands can find the name and time of the snapshot in the environment variables \s-1ZNAP_NAME\s0 and \s-1ZNAP_TIME\s0
.IP "\fB\-\-send\-delay\fR" 4
.IX Item "--send-delay"
Specify delay (in seconds) before sending snaps to the destination. May be useful if you want to control sending time.
.IP "\fBpre-send-command post-send-command\fR" 4
.IX Item "pre-send-command post-send-command"
Run command/script before and after sending the snapshot to the destination. Intended to run a remote script via ssh on
the destination, e.g. to bring up a backup disk or server. Or to put a zpool online/offline:
.Sp
\&\*(L"ssh root@bserv zpool import \-Nf tank\*(R" \*(L"ssh root@bserv zpool export tank\*(R".
.SS "\fBdelete\fP"
.IX Subsection "delete"
to remove configuration from a dataset just give its name
.PP
.Vb 1
\& znapzendzetup delete I<dataset>
.Ve
.PP
the \fBdelete\fR function understands the following options
.IP "\fB\-\-dst\fR=\fIkey\fR" 4
.IX Item "--dst=key"
to only remove a destination, specify the key of the destionation. Use the
\&\fBlist\fR function to see the keys.
.SS "\fBedit\fP"
.IX Subsection "edit"
modify the configuration of a dataset. see the descriptions in the \fBcreate\fR
function for details.
.PP
If \fBedit\fR is used with a source dataset as single argument, properties
can be edited in an editor.
.SS "\fBexport\fP"
.IX Subsection "export"
dumps the backup configuration of a dataset
.PP
.Vb 1
\& znapzendzetup export I<dataset>
.Ve
.SS "\fBimport\fP"
.IX Subsection "import"
reads configuration data from a file or \s-1STDIN\s0 and prints it content
.IP "\fB\-\-write\fR" 4
.IX Item "--write"
actually store the new configuration into the dataset given on the
commandline.
.ie n .IP "\fB\-\-prop\fR \fIkey\fR=""\fIvalue\fR"" [ \fB\-\-prop\fR ... ]" 4
.el .IP "\fB\-\-prop\fR \fIkey\fR=``\fIvalue\fR'' [ \fB\-\-prop\fR ... ]" 4
.IX Item "--prop key=""value"" [ --prop ... ]"
may be called multiple times to override properties in the imported config.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
create a complex backup task
.PP
.Vb 7
\&    znapzendzetup create \-\-recursive \-\-mbuffer=/opt/omni/bin/mbuffer \e
\&       \-\-mbuffersize=1G \-\-tsformat=\*(Aq%Y\-%m\-%d\-%H%M%S\*(Aq \e
\&       \-\-pre\-snap\-command="/bin/sh /usr/local/bin/lock_flush_db.sh" \e
\&       \-\-post\-snap\-command="/bin/sh /usr/local/bin/unlock_db.sh" \e
\&       SRC \*(Aq7d=>1h,30d=>4h,90d=>1d\*(Aq tank/home \e
\&       DST:a \*(Aq7d=>1h,30d=>4h,90d=>1d,1y=>1w,10y=>1month\*(Aq backup/home \e
\&       DST:b \*(Aq7d=>1h,30d=>4h,90d=>1d,1y=>1w,10y=>1month\*(Aq root@bserv:backup/home "/root/znapzend.sh dst_b pool on" "/root/znapzend.sh dst_b pool off"
.Ve
.PP
copy the setup from one fileset to another
.PP
.Vb 1
\&    znapzendzetup export tank/home | znapzendzetup import \-\-write tank/new_home
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2014 by \s-1OETIKER+PARTNER AG.\s0 All rights reserved.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software: you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option)
any later version.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT
ANY WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or
\&\s-1FITNESS FOR A PARTICULAR PURPOSE.\s0 See the \s-1GNU\s0 General Public License for
more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tobias\ Oetiker\ <tobi@oetiker.ch>
Dominik\ Hassler\ <hadfl@cpan.org>
.SH "HISTORY"
.IX Header "HISTORY"
2016\-09\-23 ron Destination pre and post send/receive commands
2014\-07\-22 had Pre and post snapshot commands
2014\-06\-29 had Flexible snapshot time format
2014\-06\-01 had Multi destination backup
2014\-05\-30 had Initial Version
