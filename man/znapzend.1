.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ZNAPZEND 1"
.TH ZNAPZEND 1 "2022-12-19" "0.21.1" "znapzend"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
znapzend \- znapzend daemon
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBznapzend\fR [\fIoptions\fR...]
.PP
.Vb 10
\& \-\-man                  show man\-page and exit
\& \-\-version              print version and exit
\& \-h,\-\-help              display this help and exit
\& \-d,\-\-debug             print debug messages to STDERR
\& \-n,\-\-noaction          run in simulation mode: does no changes to filesystems
\& \-\-nodelay              if a backup plan has a zend_delay defined, ignore it
\& \-\-nodestroy            does all changes to the filesystem except destroy
\& \-\-forbidDestRollback   forbids forcing destination dataset rollback and
\&                        removal of datasets/snapshots not present on source
\& \-\-logto=x              select where to log (syslog::<facility> or <filepath>)
\&                        when logging to a file, send USR1 to re\-open the filehandle
\& \-\-loglevel=x           define the log level
\& \-\-pidfile=x            write a pid file when running in daemon mode
\& \-\-daemonize            fork into the background
\& \-\-runonce=[x]          run one round on the optionally provided dataset
\& \-r,\-\-recursive         recurse from the given "run\-once" dataset
\& \-\-inherited            allow "run\-once" on dataset which only inherits a plan
\& \-\-since=x              allow to consider a non\-automatic common snapshot "x" as a starting point
\& \-\-sinceForced=x        same as \-\-since=x but also make sure "x" exists on
\&                        destination (can cause removal of newer snapshots)
\& \-\-forcedSnapshotSuffix=x  use non\-generated snapshot suffix for this "run\-once"
\& \-\-features=x           comma separated list of features to be enabled
\&                        (detailed in man page):
\&    oracleMode recvu compressed sendRaw lowmemRecurse zfsGetType
\&    skipIntermediates sendIntermediates forbidDestRollback
\& \-i/\-I                  a "zfs send" compatible on/off for skipIntermediates
\& \-\-rootExec=x           exec zfs with this command to obtain root privileges
\&                        (sudo or pfexec)
\& \-\-connectTimeout=x     sets the ConnectTimeout for ssh commands
\& \-\-autoCreation         automatically create dataset on destination if it does
\&                        not exist
\& \-\-timeWarp=x           shift znapzend\*(Aqs sense of NOW into the future
\&                        by x seconds
\& \-\-skipOnPreSnapCmdFail skip snapshots if the pre\-snap\-command fails
\& \-\-skipOnPreSendCmdFail skip replication if the pre\-send\-command fails
\& \-\-cleanOffline         clean up source snapshots even if a destination was offline
\& \-\-mailErrorSummaryTo=rcpt  if "send task(s) failed", mail a summary to rcpt
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ZnapZend is a snapshot based zfs backup daemon creating snapshots on a
scheduled basis on the source filesystem and on destination filesystems.
.PP
ZnapZend reads its configuration from custom properties in the dataset.
Use znapzendzetup to set and list these properties.
.IP "\fB\-d\fR, \fB\-\-debug\fR" 4
.IX Item "-d, --debug"
talk a lot while running. Sends debug messages to stderr.
.IP "\fB\-n\fR, \fB\-\-noaction\fR" 4
.IX Item "-n, --noaction"
don't do any actions which have lasting effect. Ideal to try out new
configurations together with \fB\-\-debug\fR
.IP "\fB\-\-nodelay\fR" 4
.IX Item "--nodelay"
if a backup plan has a zend_delay defined, ignore it (should help when
debugging the backup plan configurations, without waiting for hours to
run them during experiments)
.IP "\fB\-\-nodestroy\fR" 4
.IX Item "--nodestroy"
do all changes to the filesystem except destroying old snapshots after
a successful run to snapshot and replicate to backup destinations
.IP "\fB\-\-forbidDestRollback\fR" 4
.IX Item "--forbidDestRollback"
by default znapzend uses \fBzfs recv \-F\fR which rolls back destination to
the most recent snapshot, and in case of incremental replication streams
can also destroy snapshots and other child datasets not present in the
source.
.Sp
The \fB\-\-forbidDestRollback\fR option allows to not enforce this mode, so
znapzend would instead report errors if destination is not ready to
receive data without applying such operations. This can be useful for
maintenance of backup destinations, but can be counter-productive for
regularly scheduled operations.
.IP "\fB\-\-logto\fR={\fBsyslog::\fR\fIfacility\fR|\fIfilepath\fR}" 4
.IX Item "--logto={syslog::facility|filepath}"
send logs out to either syslog or a logfile. Default is to send logs to
\&\fBsyslog::daemon\fR when running daemonized. When running in debug mode, the
logs will go to \s-1STDERR\s0 by default.
.Sp
When logging to a file, send \s-1USR1\s0 to reopen the file handle after log rotation.
.Sp
Examples:
.Sp
.Vb 2
\& \-\-logto=/var/log/znapzend.log
\& \-\-logto=syslog::daemon
.Ve
.IP "\fB\-\-loglevel\fR={\fBdebug\fR|\fBinfo\fR|\fBwarning\fR|\fBerr\fR|\fBalert\fR}" 4
.IX Item "--loglevel={debug|info|warning|err|alert}"
Define the log level when logging to file. Default is debug.
.IP "\fB\-\-pidfile\fR=\fIpath\fR" 4
.IX Item "--pidfile=path"
write a pid file when running in daemon mode
\&\fBpidfile\fR defaults to \fI/var/run/znapzend.pid\fR if no pidfile is given
.IP "\fB\-\-daemonize\fR" 4
.IX Item "--daemonize"
Fork into the background.
.IP "\fB\-\-runonce\fR=[\fIdataset\fR]" 4
.IX Item "--runonce=[dataset]"
run one round on source \fIdataset\fR or on all datasets if empty.
This is very useful for testing. Use it in connection with \fB\-\-noaction\fR and
\&\fB\-\-debug\fR while testing your new configuration, or with \fB\-\-recursive\fR for
quick back up of whatever has backup plans in a single pool or dataset tree.
.IP "\fB\-\-forcedSnapshotSuffix\fR=\fIsnapsuffix\fR" 4
.IX Item "--forcedSnapshotSuffix=snapsuffix"
for this round of \fB\-\-runonce\fR create the specified snapshot suffix, rather
than one generated by a pattern managed by 'znapzend'. Note it would not get
automatically cleaned per retention policy, either. This is primarily intended
for manual operations where a sysadmin wants for mark the certain data state
of local significance while making an unscheduled backup.
.Sp
This option is not valid if the run-once mode is not requested.
.Sp
While basic sanity checks are done, it is up to the caller to specify a
correct string value according to the rules of their \s-1ZFS\s0 version, and to
take care that it is unique (no snapshots with such suffix already exist).
.Sp
See also \fB\-\-since\fR=\fIsnapsuffix\fR
.IP "\fB\-\-since\fR=\fIsnapsuffix\fR, \fB\-\-sinceForced\fR=\fIsnapsuffix\fR" 4
.IX Item "--since=snapsuffix, --sinceForced=snapsuffix"
Enables to see a snapshot named \fIsnapsuffix\fR in the history of the dataset
under source and target pools, which should be a common snapshot present on
both (or only on the source pool), and may be their newest common snapshot
(that would otherwise be blocking the sync as something that needs to be
removed for a full auto-creation replication and/or a usual replication).
.Sp
If the target dataset does not have this named snapshot, but the otherwise
discovered history of automatic snapshots allows to include it into the usual
replication, it will be sent (and a newer automatically-named snapshot would
be made and sent). In other cases, it is up to the systems administrator to
make the original systems data consistent with that on their remote \s-1ZFS\s0 pool.
.Sp
One could then use \fB\-\-sinceForced\fR=\fIsnapsuffix\fR variant that can remove
from destination any snapshots that are newer than \fIsnapsuffix\fR to make way
if needed, and ensure that this snapshot appears in destination's history;
by default with \fB\-\-since\fR=\fIsnapsuffix\fR such removals should not happen.
.Sp
Unlike the \fB\-\-forcedSnapshotSuffix\fR=\fIsnapsuffix\fR, this option does not
define how the new snapshot made during this run would be called (it would
be named by common timestamp-based pattern to not get in the way of subsequent
regular replications).
.Sp
The dataset name provided in this argument will never be removed during this
run-once (even if it matches the configured znapzend timestamp-based snapshot
naming pattern and is old enough to rotate away in other circumstances).
.Sp
Example:
.Sp
.Vb 1
\&  znapzend \-\-runonce=rpool/ROOT \-\-since=20200101\-01\-finallyStableSetup
.Ve
.IP "\fB\-r\fR, \fB\-\-recursive\fR" 4
.IX Item "-r, --recursive"
when backing up a particular dataset with \fB\-\-runonce\fR=[\fIdataset\fR], do not
just look at this dataset's backup plan, but iterate into its children that
might have any. Useful for quick backups of a pool whose root dataset has no
\&\fIznapzendzetup\fR configurations defined, but some trees under it do.
.Sp
See below for interaction with \fB\-\-inherited\fR option and examples.
.IP "\fB\-\-inherited\fR" 4
.IX Item "--inherited"
when backing up a particular dataset with \fB\-\-runonce\fR=[\fIdataset\fR], do not
require that the provided dataset directly has a locally defined backup plan
configuration (sanity check that it is not \*(L"received\*(R" via \s-1ZFS\s0 replication).
With this option in place, allow also to quickly snapshot and/or replicate
datasets of subtrees which inherit a backup plan from a dataset which has it
in its attributes whose source is \*(L"local\*(R".
.IP "\fB\-\-inherited\fR and \fB\-\-recursive\fR together" 4
.IX Item "--inherited and --recursive together"
At this time, the \fB\-\-inherited\fR is \*(L"sort of exclusive\*(R" vs. \fB\-\-recursive\fR
mode, and if both are specified the behavior depends on whether the requested
dataset has some (local or inherited-from-local) backup plan. If a dataset
without a backup plan is passed, the script should effectively ignore the
\&\fB\-\-inherited\fR option and just recurse until it finds some dataset(s) with
proper locally defined backup plan(s) (note that finding inherited plans
first is highly unlikely due to \s-1ZFS\s0 attribute inheritance from parents to
children).
.Sp
Examples below assume the following dataset layout:
.Sp
+ \fItank\fR (no znapzend config)
| + \fIexport\fR (local znapzend config)
| | + \fIhome\fR (inherited znapzend config from local tank/export)
| |   + \fIuser\fR (inherited znapzend config from local tank/export)
| |     + \fIsources\fR (inherited znapzend config from local tank/export)
| |     + \fIdocuments\fR (inherited znapzend config from local tank/export)
| |       + \fIpictures\fR (inherited znapzend config from local tank/export)
| + \fIvar\fR (local znapzend config)
+ \fIusbbackup\fR (no znapzend config)
  + \fIsnapshots\fR (no znapzend config)
    + \fIexport\fR (received znapzend config)
    | + \fIhome\fR (inherited from received usbbackup/snapshots/export)
    |   + \fIuser\fR (inherited from received usbbackup/snapshots/export)
    |     + \fIsources\fR (inherited from received usbbackup/snapshots/export)
    |     + \fIdocuments\fR (inherited from received usbbackup/snapshots/export)
    |       + \fIdocuments\fR (inherited from received usbbackup/snapshots/export)
    + \fIvar\fR (received znapzend config)
.Sp
Examples:
.Sp
.Vb 1
\&  znapzend \-\-recursive \-\-runonce=tank
.Ve
.Sp
This should walk all filesystem or volume datasets defined anywhere under
\&\fItank\fR (root dataset of same-named pool) and snapshot/replicate the found
datasets that have a backup plan configured \*(L"locally\*(R", such as \fItank/export\fR
and \fItank/var\fR, according to configuration (e.g. with children and beyond
if the corresponding backup plan's \fIrecursive=on\fR option is specified).
It should not waste time looking for datasets under the \fIusbbackup\fR pool.
.Sp
.Vb 1
\&  znapzend \-\-runonce=tank/export/home/user/documents
.Ve
.Sp
Given that only \fItank/export\fR \*(L"locally\*(R" defines a znapzend backup plan, the
default \fBznapzend\fR behavior with a descendant dataset would be to find no
configuration (sourced as \*(L"local\*(R" right in it) and so would \*(L"run-once\*(R" nothing.
.Sp
.Vb 1
\&  znapzend \-\-recursive \-\-runonce=tank/export/home
.Ve
.Sp
Same (no config found) for recursion starting from a dataset with inherited
backup plan configuration (assuming none of its descendants have a \*(L"local\*(R"
config of their own).
.Sp
.Vb 1
\&  znapzend \-\-inherited \-\-runonce=tank/export/home/user/documents
.Ve
.Sp
With the \fB\-\-inherited\fR option however it would recognize this descendant
dataset as having a backup plan configuration inherited from \fItank/export\fR,
would then look at \fItank/export\fR and confirm that it has this configuration
from a \*(L"local\*(R" source, and should \fBznapzend runonce\fR just this dataset and
its descendants (so including \fItank/export/home/user/documents/pictures\fR,
but not including siblings like \fItank/export/home/user/sources\fR).
.Sp
.Vb 1
\&  znapzend \-\-inherited \-\-recursive \-\-runonce=tank
.Ve
.Sp
Since \fItank\fR has no backup plan, \fBznapzend\fR should recurse and find the
nearest datasets with configured plans, \fItank/export\fR and \fItank/var\fR, and
process them according to configuration.
.Sp
.Vb 1
\&  znapzend \-\-inherited \-\-recursive \-\-runonce=tank/export
.Ve
.Sp
Since \fItank/export\fR has a locally defined backup plan, \fBznapzend\fR should
process it according to configuration.
.Sp
.Vb 1
\&  znapzend \-\-inherited \-\-recursive \-\-runonce=tank/export/home
.Ve
.Sp
Since \fItank/export/home\fR has a backup plan inherited from a locally defined
one in \fItank/export\fR, \fBznapzend\fR should process it according to configuration.
.Sp
.Vb 3
\&  znapzend \-\-recursive \-\-runonce=usbbackup
\&  znapzend \-\-inherited \-\-runonce=usbbackup/snapshots
\&  znapzend \-\-inherited \-\-recursive \-\-runonce=usbbackup/snapshots/export/home
.Ve
.Sp
Neither of these runs should do anything, because all datasets involved
(including those found by a recursive walk) under \fIusbbackup\fR have neither
a local definition of a backup plan, nor one inherited from a local definition.
.IP "\fB\-\-features\fR=\fIfeature1\fR,\fIfeature2\fR,..." 4
.IX Item "--features=feature1,feature2,..."
enables enhanced zfs features not supported by all zfs implementations.
Do not enable features unless you are sure your zfs supports (or requires) it
.Sp
Available features:
.RS 4
.IP "oracleMode" 4
.IX Item "oracleMode"
working around the following zfs issues we have seen on oracle:
.RS 4
.IP "\(bu" 4
The multi snapshot destroy syntax is not available. So stick to destroying
them individually.
.IP "\(bu" 4
Sometimes a snapshot can not be destroyed because of some oracle zfs bug.
Only a reboot seems to be able to fix this. So we just destroy the ones we
can destroy. Logging an error about the problem
.RE
.RS 4
.RE
.IP "recvu" 4
.IX Item "recvu"
use the \-u option on the receive end, to keep the destination zfs
filesystems unmounted.
.IP "resume" 4
.IX Item "resume"
use the \-s option on the receive end, to support resumable transfer
with receive_resume_token.
.Sp
If you have aborted a resumable-send, you should either do a resume-send using \-t <token>
to continue it or clear the half-received snapshot using zfs receive \-A <filesystem>
.Sp
Example:
.Sp
.Vb 2
\& zfs get receive_resume_token tank/test
\& zfs send \-t <token> | zfs receive \-s tank/test
.Ve
.IP "compressed" 4
.IX Item "compressed"
use 'compressed' to add options \-Lce to the zfs send command
.Sp
Even if a source and destination datasets are both using compression,
zfs send will, by default, decompress the data before sending, and
zfs recv will then compress it again before writing it to disk.
Using \-c will skip the unnecessary decompress-compress stages.
This decreases \s-1CPU\s0 load on both source and destination as well
as reduces network bandwidth usage.
.Sp
The \-L option is for large block support and \-e is for embedded data
support. These may require certain (Open)ZFS features to be enabled.
.IP "sendRaw" 4
.IX Item "sendRaw"
use 'sendRaw' to add option \-w to zfs send commands
.Sp
For encrypted source datasets this instructs zfs not to decrypt
before sending which results in a remote backup that can't be read
without the encryption key/passphrase, useful when the remote isn't
fully trusted or not physically secure. This option must be used
consistently, raw incrementals cannot be based on non-raw snapshots
and vice versa.
.IP "sendIntermediates" 4
.IX Item "sendIntermediates"
The opposite of \fIskipIntermediates\fR, detailed in the next section.
This is the default mode of operation, and only included here to
allow for completeness and explicitness of your configurations.
.IP "skipIntermediates" 4
.IX Item "skipIntermediates"
Enable the 'skipIntermediates' feature to send a single increment
between latest common snapshot and the newly made one. It may skip
several source snaps if the destination was offline for some time,
and it should skip snapshots not managed by znapzend. Normally for
online destinations, the new snapshot is sent as soon as it is
created on the source, so there are no automatic increments to skip.
.Sp
By default 'znapzend' uses the 'zfs send \-I' option on the sending
end (so to include all intermediate snapshots), rather than '\-i'
(which would send a single big increment), to keep the destination
zfs dataset history similar to the source's one. This implies the
\&\-\fIsendIntermediates\fR mode of operation.
.Sp
Note: it was the default from beginning of 'znapzend' to make sure
that in case a send operation takes too long, we still get all the
intermediate snapshots sent to the destination.
Beware or benefit that this can deliver not only automatic, but also
manually named snapshots to your destination which would have to be
cleaned manually when no longer wanted there, but that they can be
used as common snapshots to repair broken syncs e.g. with \fI\-\-since=X\fR
options.
.Sp
With the 'skipIntermediates' feature disabled, all snapshots between
the latest common one and the newly created one on the source would
be sent to each destination, and then the \*(L"extra\*(R" ones of those managed
by znapzend may get discarded according to destination's retention
policy. Note that snapshots which are \s-1NOT\s0 managed by znapzend, e.g.
ones you created manually, would appear on the destination and stay
there until removed manually. Also note that this may consume more
disk space and transfer time than otherwise needed for the data
increment.
.Sp
This original mode is now primarily recommended for irregular backups
(on removable media or over unstable links) and cases where the
sysadmin marks certain data states via snapshots as special (e.g.
\&\*(L"before_upgrade\*(R", etc.)
.Sp
The feature is recommended to be part of your 'znapzend' service
setup for regular runs in stable storage/networking conditions.
.IP "forbidDestRollback" 4
.IX Item "forbidDestRollback"
Avoid use of destructive 'zfs recv \-F' in favor of failing to receive;
more details in description of \fB\-\-forbidDestRollback\fR \s-1CLI\s0 option above.
.IP "lowmemRecurse" 4
.IX Item "lowmemRecurse"
use 'lowmemRecurse' on systems where you have too many datasets,
so a recursive listing of attributes to find backup plans exhausts
the memory available to `znapzend(zetup)`: instead, go the slower
way to first list all impacted dataset names, and then query their
configs one by one.
.IP "zfsGetType" 4
.IX Item "zfsGetType"
use 'zfsGetType' if your 'zfs get' supports a '\-t' argument for
filtering by dataset type at all (e.g. one in Solaris 10 does not),
\&\s-1AND\s0 lists properties for snapshots by default when recursing (e.g.
the one in Solaris 10u8 already does), so that there is too much
data to process while searching for backup plans.
.Sp
If these two conditions apply to your system, the time needed for
a '\-\-recursive' search for backup plans can literally differ by
hundreds of times (depending on the amount of snapshots in that
dataset tree... and a decent backup plan will ensure you have a
lot of those), so you would benefit from requesting this feature.
.Sp
This feature should not impact the default (non\- '\-\-recursive')
listings however.
.RE
.RS 4
.RE
.IP "\fB\-\-rootExec\fR={sudo|pfexec}" 4
.IX Item "--rootExec={sudo|pfexec}"
Execute zfs with this command, 'sudo' or 'pfexec', to
obtain root privileges. This is often necessary when running znapzend as a
non-privileged user with a zfs install that doesn't support finer permission
controls. This also applies to the zfs commands ran on remote servers over ssh.
.Sp
For sudo, the /etc/sudoers file will need to be modified to allow for
passwordless access to zfs commands if znapzend is to be ran as a daemon or
the system will be used as a remote. Many \s-1ZFS\s0 installations include an
/etc/sudoers.d/zfs file as an example.
.IP "\fB\-\-connectTimeout\fR=\fItimeout\fR" 4
.IX Item "--connectTimeout=timeout"
sets the ssh connection timeout (in seconds)
.IP "\fB\-\-autoCreation\fR" 4
.IX Item "--autoCreation"
Automatically create a dataset on a destination host if it's not there yet.
.IP "\fB\-\-timeWarp\fR=x" 4
.IX Item "--timeWarp=x"
Shift ZnapZend's sense of time into the future by x seconds.
.Sp
The practical application if this function is to determine what will happen
at some future point in time. This can be useful for testing but also when
running in \fBnoaction\fR and \fBdebug\fR mode to determine which snapshots would
be created and removed at some future point in time.
.IP "\fB\-\-skipOnPreSnapCmdFail\fR" 4
.IX Item "--skipOnPreSnapCmdFail"
Prevent snapshots of a dataset from being taken when it has a \fBpre-snap-command\fR
defined and the command returns a non-zero exit code or is killed by a signal.
.IP "\fB\-\-skipOnPreSendCmdFail\fR" 4
.IX Item "--skipOnPreSendCmdFail"
Prevent snapshots of a dataset from being replicated to a destination when
it has a \fBpre-snap-command\fR defined and the command returns a non-zero exit
code or is killed by a signal.
.IP "\fB\-\-cleanOffline\fR" 4
.IX Item "--cleanOffline"
Clean snapshots of a source dataset even if one or more destination datasets
failed during replication for whatever reason (destination offline, destination
full, destination pool became read-only due to storage issues, source too full
to make a snapshot, etc.).
.Sp
The most recent common snapshot for each destination (as tracked on source for
resilience) will not be deleted from source, but this is still a potentially
dangerous option: if the preserved snapshot somehow gets deleted from the
destination, it may require a full re-replication the next time it is online.
.IP "\fB\-\-mailErrorSummaryTo=rcpt(@domain),...\fR" 4
.IX Item "--mailErrorSummaryTo=rcpt(@domain),..."
If this argument is passed, a copy of error summary would be sent there by
your system's command line mailer program. It is then up to this program and
system setup to validate the recipient names (local or domain-suffixed) and
deliver the message to some mailbox.
.Sp
This feature relies on a program which supports standard sendmail-like \s-1CLI.\s0
.SH "EXAMPLE"
.IX Header "EXAMPLE"
To test a new config:
.PP
.Vb 1
\& znapzend \-\-debug \-\-noaction \-\-runonce=tank/test
.Ve
.PP
To see what is going to happen in one hour:
.PP
.Vb 1
\& znapzend \-\-debug \-\-noaction \-\-timeWarp=3600 \-\-runonce=tank/test
.Ve
.PP
To run as a daemon:
.PP
.Vb 1
\& znapzend \-\-daemonize \-\-pidfile=/var/run/znapzend.pid \-\-logto=syslog::daemon
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2014 by \s-1OETIKER+PARTNER AG.\s0 All rights reserved.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software: you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option)
any later version.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT
ANY WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or
\&\s-1FITNESS FOR A PARTICULAR PURPOSE.\s0 See the \s-1GNU\s0 General Public License for
more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tobias\ Oetiker\ <tobi@oetiker.ch>,
Dominik\ Hassler\ <hadfl@cpan.org>
.SH "HISTORY"
.IX Header "HISTORY"
.Vb 2
\& 2014\-06\-01 had Multi destination backup
\& 2014\-05\-30 had Initial Version
.Ve
