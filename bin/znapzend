#!/usr/bin/env perl

use FindBin;
# PERL5LIB
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin/../thirdparty/lib/perl5";

use Getopt::Long 2.25 qw(:config posix_default no_ignore_case);
use Pod::Usage 1.14;
use Sys::Syslog;
use File::Basename;

use Mojo::Base -strict;
use Mojo::Util qw(slurp);
use POSIX qw(setsid);

use ZnapZend;

my $opts = {};

sub main {
    GetOptions($opts, qw(help|h man debug|d noaction|n nodestroy daemonize pidfile=s syslog=s)) or exit 1;

    $opts->{help} && do {
        pod2usage(-exitval => 'NOEXIT');

        #clear options if testing
        $opts = {} if $ENV{ZNAPZEND_TESTING};

        return 1;
    };
    $opts->{man}  && pod2usage(-exitstatus => 0, -verbose => 2);

    # need to set nodestroy to 0 if not set, to override nodestroy=1 default value in ZFS.pm
    $opts->{nodestroy} //= 0;

    openlog(basename($0), 'cons,pid', $opts->{syslog} || 'local6');

    my $znapzend = ZnapZend->new($opts);

    daemonize() if $opts->{daemonize};

    $znapzend->start();
    return 1;
}

sub daemonize {
   my $pidFile = $opts->{pidfile};

   if (defined $pidFile && -f $pidFile){
        chomp(my $pid = slurp $pidFile);
        if (kill 0, $pid){
            die "I Quit! Another copy of znapzend ($pid) seems to be running. See $pidFile\n";
        }
    }
    defined (my $pid = fork) or die "Can't fork: $!";

    if ($pid){
        #return if testing instead of exit; will cause to run 2 znapzend in parallel
        return 1 if $ENV{ZNAPZEND_TESTING};

        exit;
    }
    else{
        print STDERR "znapzend ($$) is running in the background now.\n";

        if ($pidFile){
            if (open my $fh, '>', $pidFile){
                print $fh "$$\n";
            }
            else {
                warn "creating pid file $pidFile: $!\n";
            }
        }
        setsid or die "Can't start a new session: $!";
        open STDOUT, '>/dev/null' or die "ERROR: Redirecting STDOUT to /dev/null: $!";
        open STDIN, '</dev/null' or die "ERROR: Redirecting STDIN from /dev/null: $!";
        open STDERR, '>/dev/null' or die "ERROR: Redirecting STDERR to /dev/null: $!";

        # send warnings and die messages to log
        $SIG{__WARN__} = sub { syslog('warning', shift) };
        $SIG{__DIE__}  = sub { return if $^S; syslog('err', shift); exit 1 };
    }
}

main();

1;

__END__

=head1 NAME

znapzend - znapzend daemon

=head1 SYNOPSIS

B<znapzend> [I<options>...]

 --man         show man-page and exit
 -h,--help     display this help and exit 
 -d,--debug    print debug messages to STDERR
 -n,--noaction run in simulation mode. does no changes to the filesystem
 --nodestroy   does all changes to the filesystem except destroy
 --syslog=x    select the syslog facility 
 --pidfile=x   write a pid file when running in daemon mode
 --daemonize   fork into the background

=head1 DESCRIPTION

znapzend is a snapshot based zfs backup daemon creating snapshots on a scheduled basis on the source filesystem and on destination filesystems

=head1 COPYRIGHT

Copyright (c) 2014 by OETIKER+PARTNER AG. All rights reserved.

=head1 LICENSE

This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=head1 AUTHOR

S<Tobias Oetiker E<lt>tobi@oetiker.chE<gt>>
S<Dominik Hassler>

=head1 HISTORY

2014-06-01 had Multi destination backup
2014-05-30 had Initial Version

=cut

