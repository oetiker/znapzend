#!/usr/bin/env perl

use FindBin;
# PERL5LIB
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin/../thirdparty/lib/perl5";

use Getopt::Long qw(:config posix_default no_ignore_case);
use Pod::Usage;

use ZnapZend;

my $opts = {};
my @featureList = qw(combinedDestroy);

sub main {
    GetOptions($opts, qw(help|h man debug|d noaction|n nodestroy features=s),
        qw(daemonize pidfile=s logto=s loglevel=s runonce=s)) or exit 1;

    #split all features into individual options
    my %features = map { $_ => 1 } split /,/, $opts->{features};
    delete $opts->{features};
    #make sure feature is supported.
    for my $feature (keys %features){
        grep { $_ eq $feature } @featureList or die "ERROR: feature '$feature' not supported\n";
    }
    
    $opts->{help} && do {
        pod2usage(-exitval => 'NOEXIT');

### RM_COMM_4_TEST ###  # remove ### RM_COMM_4_TEST ### comments for testing purpose.
### RM_COMM_4_TEST ###  $opts = {};

        return 1;
    };

    $opts->{man} && pod2usage(-exitstatus => 0, -verbose => 2);

    #clear features
    delete $opts->{features};

    my $znapzend = ZnapZend->new(
        {
            %$opts,
            combinedDestroy => $features{combinedDestroy},
        }
    );
    $znapzend->start;

    return 1;
}

main();

1;

__END__

=head1 NAME

znapzend - znapzend daemon

=head1 SYNOPSIS

B<znapzend> [I<options>...]

 --man         show man-page and exit
 -h,--help     display this help and exit 
 -d,--debug    print debug messages to STDERR
 -n,--noaction run in simulation mode. does no changes to the filesystem
 --nodestroy   does all changes to the filesystem except destroy
 --logto=x     select where to log to (syslog::<facility> or <filepath>)
 --loglevel=x  define the log level when logging to file
 --pidfile=x   write a pid file when running in daemon mode
 --daemonize   fork into the background
 --runonce=x   run one round on source dataset x
 --features=x  comma separated list of features to be enabled

=head1 DESCRIPTION

ZnapZend is a snapshot based zfs backup daemon creating snapshots on a
scheduled basis on the source filesystem and on destination filesystems.

ZnapZend reads its configuration from custom properties in the fileset. Use
L<znapzendzetup> to set these properties.

=over

=item B<-d>, B<--debug>

talk a lot while running. Sends debug messages to stderr.

=item B<-n>, B<--noaction>

don't do any actions which have lasting effect. Ideal to try our new new
configurations together with B<--debug>

=item B<--nodestroy>

do all changes to the filesystem except destroy old snapshots

=item B<--logto>={B<syslog::>I<facility>|I<filepath>}

send logs out to either syslog or a logfile. Default is to send logs to
B<syslog::daemon> when runing daemonized. When running in debug mode, the
logs will go to STDERR by default.

Examples: 

 --logto=/var/log/znapzend.log
 --logto=syslog::daemon

=item B<--loglevel>={B<debug>|B<info>|B<warning>|B<err>|B<alert>}

Define the log level when logging to file. Default is debug.

=item B<--pidfile>=I<path>

write a pid file when running in daemon mode

=item B<--daemonize>

Fork into the background.

=item B<--runonce>=I<fileset>

run one round on source I<fileset>. This is very useful for testing.
Use it in connection with B<--noaction> and B<--debug> while
testing your new configuration

=item B<--features>=I<feature1>,I<feature2>,...

enables enhanced zfs features not supported by all zfs implementations.
Do not enable features unless you are sure your zfs supports it

Available features:

 combinedDestroy

=back

=head1 EXAMPLE

To test a new config

 znapzend --debug --noaction --runonce=tank/test

To run as a daemon

 znapzend --daemonize --pidfile=/var/run/znapzend.pid --logto=syslog::daemon

=head1 COPYRIGHT

Copyright (c) 2014 by OETIKER+PARTNER AG. All rights reserved.

=head1 LICENSE

This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=head1 AUTHOR

S<Tobias Oetiker E<lt>tobi@oetiker.chE<gt>>,
S<Dominik Hassler E<lt>hadfl@cpan.orgE<gt>>

=head1 HISTORY

 2014-06-01 had Multi destination backup
 2014-05-30 had Initial Version

=cut

