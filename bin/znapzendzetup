#!/usr/bin/env perl

use FindBin;
# PERL5LIB
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin/../thirdparty/lib/perl5";

use Getopt::Long 2.25 qw(:config posix_default no_ignore_case);
use Pod::Usage 1.14;

use Mojo::Base -strict;
use ZnapZend::Config;

sub dumpProperties {
    my $props = shift;

    for my $backupSet (@$props){
        print "*** backup plan: $backupSet->{src} ***\n";
        for my $opt (sort keys %$backupSet){ 
            #singular plural check on backup plans. if value is 1, remove trailing 's'
            if ($opt =~ /plan$/){
                $backupSet->{$opt} =~ s/(\d+)([a-z]+)s/$1 eq '1' ? "$1$2" : "$1$2s"/eg;
            }
            print "$opt" . ' ' x (16 - length($opt)) ."= $backupSet->{$opt}\n";
        }
        print "\n";
    }
}

sub parseArguments {
    my $args = shift;
    my %backupSet;
    my $key = 0;
    my $state = '';

    for (@$args){
        #keyword SRC detected. start setting up source filesystem and plan
        /^SRC$/ && do {
            $state = 'src';
            next;
        };
        #keyword DST detected. start setting up destination filesystem and plan
        /^DST(?::([a-z0-9_]+))?/ && do {
            $state = 'dst';
            $key = $1 // $key++;
            next;
        };
        #option contains '=>' so it must be a backup plan
        /=>/ && do {
            $backupSet{src_plan} = $_ and next if $state eq 'src';
            $backupSet{'dst_' . $key . '_plan'} = $_ and next if $state eq 'dst';
            die "ERROR: backup plan $_ is not related do a source or destination dataset. check the syntax\n";
        };
        #option must be a dataset or invalid
        $state eq 'src' && do {
            $backupSet{src} = $_;
            $state = '';
            next;
        };
        $state eq 'dst' && do {
            $backupSet{"dst_$key"} = $_;
            $state = '';
            next;
        };
        die "ERROR: dont know what to do with $_. check the syntax\n";
    }

    #check if we have a valid source as this is crucial
    $backupSet{src} or die "ERROR: no source dataset given. check the syntax\n";

    return \%backupSet;
}

sub main {
    my $mainOpt = shift;
    my $zConfig = ZnapZend::Config->new();
    my $opts = {};
    my %cfg;
    my $ZNAPZEND_TESTING = 0;

### RM_COMM_4_TEST ###  # remove ### RM_COMM_4_TEST ### comments for testing purpose.
### RM_COMM_4_TEST ###  $ZNAPZEND_TESTING = 1;

    defined $mainOpt or pod2usage(1);

    for ($mainOpt){

    /^create$/ && do {
        GetOptions($opts, qw(recursive|r donotask mbuffer=s mbuffersize=s tsformat=s)) or exit 1;

        $cfg{enabled}      = 'on';
        $cfg{recursive}    = $opts->{recursive}    ? 'on' : 'off';
        $cfg{mbuffer}      = $opts->{mbuffer}     || 'off';
        $cfg{mbuffer_size} = $opts->{mbuffersize} || '1G'; 
        $cfg{tsformat}     = $opts->{tsformat}    || '%Y-%m-%d-%H%M%S';

        my $backupSet = parseArguments(\@ARGV);
        #merge arguments to our cfg
        for (keys %$backupSet){
            $cfg{$_} = $backupSet->{$_};
        }

        $zConfig->checkBackupSet(\%cfg);
        
        dumpProperties([\%cfg]);
        #ask user if backup plan shall be stored unless option 'donotask' is passed
        if (!$opts->{donotask}){
            print "Do you want to save this backup set [y/N]? ";
            #bypass check if testing
            my $check = $ZNAPZEND_TESTING ? 'y' : <STDIN>;
            chomp ($check);
            if ($check =~ /^y(?:es)?$/i){
                $zConfig->setBackupSet(\%cfg)
                    or die "ERROR: cannot create backup config for $cfg{src}\n";
            }
        }
        else {
            $zConfig->setBackupSet(\%cfg)
                or die "ERROR: cannot create backup config for $cfg{src}\n";
        }

        last;
    };
    /^delete$/ && do {
        GetOptions($opts, qw(dst=s)) or exit 1;

        $opts->{src} = pop @ARGV;
        defined $opts->{src} or pod2usage(1);

        if ($opts->{dst}){
            $zConfig->deleteBackupDestination($opts->{src}, 'dst_' . $opts->{dst});
        }
        else {
            $zConfig->deleteBackupSet($opts->{src})
                or die "ERROR: cannot delete backup config for $opts->{src}\n";
        }

        last;
    };
    /^edit$/ && do {
        GetOptions($opts, qw(donotask recursive=s mbuffer=s mbuffersize=s tsformat=s)) or exit 1;

        my $backupSet = parseArguments(\@ARGV);

        $backupSet->{recursive}    = $opts->{recursive}
            if $opts->{recursive} && $opts->{recursive} =~ /^on|off$/;
        $backupSet->{mbuffer}      = $opts->{mbuffer}     if $opts->{mbuffer};
        $backupSet->{mbuffer_size} = $opts->{mbuffersize} if $opts->{mbuffersize};  
        $backupSet->{tsformat}     = $opts->{tsformat}    if $opts->{tsformat};

        #get active backup config
        my $backupSets = $zConfig->getBackupSet($backupSet->{src}) or die "ERROR: cannot get backup config\n";
        @$backupSets or die "ERROR: backup set for $backupSet->{src} does not exist\n";
        %cfg = %{$backupSets->[0]};

        #merge new config
        for (keys %$backupSet){
            $cfg{$_} = $backupSet->{$_};
        }
        #check new backup set
        $zConfig->checkBackupSet(\%cfg);
        
        dumpProperties([\%cfg]);
        #ask user if backup plan shall be stored
        if (!$opts->{donotask}){
            print "Do you want to save this backup set [y/N]? ";
            #bypass check if testing
            my $check = $ZNAPZEND_TESTING ? 'y' : <STDIN>;
            chomp ($check);
            if ($check =~ /^y(?:es)?$/i){
                $zConfig->setBackupSet(\%cfg)
                    or die "ERROR: cannot create backup config for $cfg{src}\n";
            }
        }
        else {
            $zConfig->setBackupSet(\%cfg)
                or die "ERROR: cannot create backup config for $cfg{src}\n";
        }

        last;
    };
    /^enable$/ && do {
        $opts->{src} = pop @ARGV;
        defined $opts->{src} or pod2usage(1);
        $zConfig->enableBackupSet($opts->{src})
            or die "ERROR: cannot enable backup config for $opts->{src}. Did you create it?\n";

        last;
    };
    /^disable$/ && do {
        $opts->{src} = pop @ARGV;
        defined $opts->{src} or pod2usage(1);
        $zConfig->disableBackupSet($opts->{src})
            or die "ERROR: cannot disable backup config for $opts->{src}. Did you create it?\n";

        last;
    };
    /^list$/ && do {
        my $backupSets = $zConfig->getBackupSet(pop @ARGV)
            or die "ERROR: cannot list backup config\n";

        dumpProperties($backupSets);
        last;
    };
    /^man$/ && do {
        pod2usage(-exitstatus => 0, -verbose => 2);

        last;
    };
    /^help$/ && do {
        pod2usage(-exitval => 'NOEXIT');

        last;
    };
        #main argument invalid
        pod2usage(1);
    }
    return 1;
}

main(shift);

1;

__END__

=head1 NAME

znapzendzetup - znapzend setup utility

=head1 SYNOPSIS

B<znapzendzetup> I<command> [I<options...>]

where 'command' is one of the following:

    create [--recursive] [--mbuffer=<path>] [--mbuffersize=<size>] \
           [--tsformat=<format>] --donotask \
           SRC plan dataset \
           [ DST[:key] plan [[user@]host:]dataset ]

    delete [--dst=key] <src_dataset>

    edit [--recursive=on|off] [--mbuffer=<path>|off] [--mbuffersize=<size>] \
           [--tsformat=<format>] --donotask \
           SRC [plan] dataset \
           [ DST:key [plan] [dataset] ]

    enable <src_dataset>

    disable <src_dataset>

    list [src_dataset]

    help

    man

=head1 DESCRIPTION

Znapzend is a snapshot based zfs backup daemon creating snapshots on a
scheduled basis on the source filesystem and on a destination filesystem

=head2 Create Command

The heart of the znapzend backup is the plan. The plan specifies how often
to backup and for how long to keep the backups. A plan is required both for
the source and the destination datasets.

The plan consists of a series of retention periodes to interval
associations:

  retA=>intA,retB=>intB,...

Both intervals and retention periods are expressed in standard units of time
or multiples of them. You can use both the full name or a shortcut according
to the following table:

 second|sec|s
 minute|min|M
 hour|h
 day|d
 week|w
 mon|month|m
 year|y

To keep one copy every 30 minutes for one week, specify:
 
 1week=>30min

To keep one copy every two days for 10 years:

 10year=>2day


The 'tsformat' option specifies the format of the snapshots being created.
The syntax is 'strftime like'. The string must consist of the mandatory

 (%Y, %m, %d, %H, %M, %S)

and optional

 (-, _, ., :)

characters.

If not specified, tsformat defaults to '%Y-%m-%d-%H%M%S'.

If mbuffer is specified, the size of the mbuffer can be set with
the 'mbuffersize' option. mbuffersize supports the following units:

 b, k, M, G

To specify a mbuffer size of 100 MB:

 --mbuffersize=100M

If not set, mbuffersize defaults to 1 GB.

Use option 'donotask' for create/edit to run changes immediately.

=head1 EXAMPLE

    znapzendzetup create -r --mbuffer=/opt/omni/bin/mbuffer \
       --mbuffersize=1337M --tsformat='%Y-%m-%d-%H%M%S' \
       SRC '7d=>1h,30d=>4h,90d=>1d' tank/home \
       DST:a '7d=>1h,30d=>4h,90d=>1d,1y=>1w,10y=>1month' backup/home \
       DST:b '7d=>1h,30d=>4h,90d=>1d,1y=>1w,10y=>1month' root@bserv:backup/home

=head1 COPYRIGHT

Copyright (c) 2014 by OETIKER+PARTNER AG. All rights reserved.

=head1 LICENSE

This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=head1 AUTHOR

S<Tobias Oetiker E<lt>tobi@oetiker.chE<gt>>
S<Dominik Hassler>

=head1 HISTORY

2014-06-29 had Flexible snapshot time format
2014-06-01 had Multi destination backup
2014-05-30 had Initial Version

=cut

